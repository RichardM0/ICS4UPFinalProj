import java.awt.event.*;
import java.awt.Graphics;
import java.awt.Color;
import javax.swing.JPanel;
import javax.swing.Timer;
import java.util.ArrayList;
import java.util.Random;
public class GravityPanel extends JPanel implements ActionListener
{
   /*
    * Instance and Static variables for BallPanel class
    * Includes timer, speed variables, motion variables, and arraylist for balls, 
    */
   private int delay = 10;
   private static final double G = 6.67430e-11;
   protected Timer timer;
   private ArrayList<Ball> balls = new ArrayList<Ball>();
   private GravityPointer gp = new GravityPointer(this.getWidth(), this.getHeight());
   private double rotateSpeed = Math.PI / 2048;
   private boolean isStopped = true;
   public static String speed = "low";
   private String movement = "linear";
   
   /*
    * constructor for objects of BallPanel
    * create an "original" ball
    * Start a timer to keep refreshing screen
    */
   public GravityPanel()
   {
      balls.add(new Ball(200, 200, 10,  System.currentTimeMillis()));
      timer = new Timer(delay, this);
      timer.start();

   }
   /*
    * actionPerformed method
    * repaints ball to screen constantly
    */
   public void actionPerformed(ActionEvent e)
   {
       repaint();
   }
   /*
    * paintComponent method
    * Paints every ball to the screen
    * Checks every ball's positions and boundaries to change dX, dY
    * Move the ball if stop button was not pressed
    */
   public void paintComponent( Graphics g )
   {
       super.paintComponent( g );
       attraction();
       g.setColor(Color.black);
       g.fillOval((int)(gp.getX()-gp.getRadius()), (int)(gp.getY()-3*gp.getRadius()), 2*gp.getRadius(), 2*gp.getRadius());
       gp.move();
       gpTurn();
       boundQuadrant();
       for(Ball b : balls){
           g.setColor(b.getColor());
           if(b.getX()>this.getWidth() - b.getRadius() || b.getX()<b.getRadius()){
               b.setX(b.getX()>this.getWidth() - b.getRadius() ? this.getWidth() - b.getRadius() : b.getRadius());
               b.setDx(-b.getDx());
           }
           if(b.getY()>this.getHeight() - b.getRadius() || b.getY()<0 + b.getRadius()){
               b.setY(b.getY()>this.getHeight() - b.getRadius() ? this.getHeight() - b.getRadius() : b.getRadius());
               b.setDy(-b.getDy());
           }
           if(!isStopped){
                b.move();
           }
           else if(isStopped){
               b.setDx(1);
               b.setDy(1);
           }
           g.fillOval((int)(b.getX() - b.getRadius()), (int)(b.getY() - b.getRadius()), b.getRadius()*2, b.getRadius()*2);
       }
   }
   public void reset(){
       balls.clear();
       addBall();
   }
   public void ballReset(){
       for(Ball b : balls){
           b.setDx(3.0);
           b.setDy(3.0);
       }
   }
   public void accumulate(int mX, int mY){
       if((mX>gp.getX()-gp.getRadius() && mX<gp.getX()+gp.getRadius()) && (mY>gp.getY()-gp.getRadius() && mY<gp.getY()+gp.getRadius())){
           if(gp.getRadius() > 50){
               return;
           }
           gp.setMass(gp.getMass() + 1e14);
           gp.setRadius(gp.getRadius() + 5);
           gp.setY(gp.getY() + 5);
       }
   }
   public void attraction(){
       for(Ball b : balls){
           double dx = gp.getX()-b.getX();
           double dy = gp.getY()-b.getY();;
           double distance = Math.sqrt(dx*dx + dy*dy);
           double fx = 0;
           double fy = 0;

           if (distance > b.getRadius() + gp.getRadius()) { 
               double force = (G * b.getMass() * gp.getMass()) / (distance * distance);
               fx += force * (dx / distance);
               fy += force * (dy / distance);
           }
           b.updateVel(fx, fy);
       }
   }
   /*
    * setSpeed method
    * Adjusts speed to low, medium, or high
    * Scales dX, dY, circular/sinusoidal curving speed z
    * Keeps track of current speed selected using String s
    */
   public void setSpeed(double x, double y, int z, String s){
       speed = s;
       for(Ball b : balls){
           if(b.getDx()<0){
               b.setDx(-x);
           }
           else if(b.getDx()>0){
               b.setDx(x);
           }
           if(b.getDy()<0){
               b.setDy(-y);
           }
           else if(b.getDy()>0){
               b.setDy(y);
           }
           rotateSpeed = Math.PI/z;  
       }
   }
   /*
    * setStopped method and setStart method
    * setStopped stops motion
    * setStart starts motion
    */
   public void setStopped(){
       isStopped = true;
   }
   public void setStart(){
       isStopped = false;
   }
   /*
    * addBall method
    * Adds ball to the BallPanel
    * Uses java.util.Random to randomize position and Color
    * Sets speed of ball according to the selected speed
    * add ball to arrayList balls
    */
   public void addBall(){
        Random rand = new Random();
        int width = this.getWidth();
        int height = this.getHeight();
        int x = 30 + rand.nextInt(30 + 3*width/4);
        int y = 30 + rand.nextInt(30 + 3*height/4);
        Ball b = new Ball(x, y, 10, System.currentTimeMillis());
        if(speed.equals("low")){
            b.setDx(3.0);
        }
        else if(speed.equals("medium")){
            b.setDx(6.0);
        }
        else if(speed.equals("high")){
            b.setDx(9.0);
        }
        b.setColor(Color.red);
        balls.add(b);
   }
   /*
    * setColor method
    * Changes color of every ball
    * Go through every ball in balls arrayList to change color
    */
   public void setColor(Color c){
        for(Ball b : balls){
            b.setColor(c);
        }
   }
   public void gpTurn(){
        int width = this.getWidth();
        int height = this.getHeight();
        if(gp.getMoving() == 1 && gp.getX() >= 4*width/5){
            gp.setMoving(2);
        }
        else if(gp.getMoving() == 2 && gp.getY() >= 4*height/5){
            gp.setMoving(3);
        }
        else if(gp.getMoving() == 3 && gp.getX() <= width/5){
            gp.setMoving(4);
        }
        else if(gp.getMoving() == 4 && gp.getY() < width/5){
            gp.setMoving(1);
        }
    }
   public void gpQuadrant(){
        int width = this.getWidth();
        int height = this.getHeight();
        if((gp.getX()>0 && gp.getX()<width/2) && (gp.getY()>0 && gp.getY()<height/2)){
            gp.setQuadrant(1);
        }
        else if((gp.getX()>width/2 && gp.getX()<width) && (gp.getY()>0 && gp.getY()<height/2)){
            gp.setQuadrant(2);
        }
        else if((gp.getX()>0 && gp.getX()<width/2) && (gp.getY()>height/2 && gp.getY()<height)){
            gp.setQuadrant(3);
        }
        else if((gp.getX()>width/2 && gp.getX()<width) && (gp.getY()>height/2 && gp.getY()<height)){
            gp.setQuadrant(4);
        }
   }
   public void boundQuadrant()
   {
       int width = this.getWidth();
       int height = this.getHeight();
       for(Ball b : balls){
           if(b.getX() > gp.getX() + width/4 - b.getRadius() || b.getX() < Math.max(b.getRadius(), gp.getX() - width/4 + b.getRadius())){
                b.setX(b.getX() > gp.getX() + width/4 - b.getRadius() ? gp.getX() + width/4 - b.getRadius() : Math.max(b.getRadius(), gp.getX() - width/4 + b.getRadius()));
           }
           if(b.getY() > gp.getY() + height/4 - b.getRadius() || b.getY() < Math.max(b.getRadius(), gp.getY() - height/4 + b.getRadius())){
                b.setY(b.getY() > gp.getY() + height/4 - b.getRadius() ? gp.getY() + height/4 - b.getRadius() : Math.max(b.getRadius(), gp.getY() - height/4 + b.getRadius()));
           }
       }
   }
   /*
    * setMovement and getMovement method
    * setMovement method sets current motion to selected motion
    * getMovement method gets current motion
    */
   public void setMovement(String path){
        movement = path;
   }
   public String getMovement(){
        return movement;
   }
}
